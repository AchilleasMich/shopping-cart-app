import { describe, it, expect } from "vitest";
import { initialState, reducer, ACTIONS } from "./reducers";

// Majority of tests were generated by github copilot
// and then adjusted, altered and enriched
describe("reducer", () => {
    it("should return the initial state when an unknown action is provided", () => {
        const result = reducer(initialState, { type: "UNKNOWN_ACTION" });
        expect(result).toEqual(initialState);
    });

    it("should handle ADD_PRODUCTS action", () => {
        const products = [{ id: 1, name: "Product 1", stock: 10, price: 123 }];
        const result = reducer(initialState, { type: ACTIONS.ADD_PRODUCTS, payload: products });
        expect(result.products).toEqual(products);
    });

    it("should handle ADD_TO_CART action when product is not in the cart", () => {
        const state = {
            ...initialState,
            products: [{ id: 1, name: "Product 1", stock: 10 }],
        };
        const productToAdd = { id: 1, name: "Product 1", stock: 10, price: 12 };
        const result = reducer(state, { type: ACTIONS.ADD_TO_CART, payload: productToAdd });

        expect(result.cart).toEqual([{ id: 1, name: "Product 1", price: 12, quantity: 1 }]);
        expect(result.products[0].stock).toBe(9);
    });

    it("should handle ADD_TO_CART action when product is already in the cart", () => {
        const state = {
            ...initialState,
            products: [{ id: 1, name: "Product 1", stock: 10, price: 44 }],
            cart: [{ id: 1, name: "Product 1", price: 44, quantity: 1 }],
        };
        const productToAdd = { id: 1, name: "Product 1", price: 44 };
        const result = reducer(state, { type: ACTIONS.ADD_TO_CART, payload: productToAdd });

        expect(result.cart).toEqual([{ id: 1, name: "Product 1", price: 44, quantity: 2 }]);
        expect(result.products[0].stock).toBe(9);
    });

    it("should not add to cart if product stock is 0", () => {
        const state = {
            ...initialState,
            products: [{ id: 1, name: "Product 1", stock: 0, price: 110 }],
        };
        const productToAdd = { id: 1, name: "Product 1", price: 110 };
        const result = reducer(state, { type: ACTIONS.ADD_TO_CART, payload: productToAdd });

        expect(result.cart).toStrictEqual([])
        expect(result.products[0].stock).toBe(0);
    });
});